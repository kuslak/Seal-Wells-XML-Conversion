package com.shawgrp.cwp.test;

//Java
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;

/**
 * This class demonstrates the conversion of an XML file to PDF using JAXP
 * (XSLT) and FOP (XSL-FO).
 */
public class AppendPDFTest
{

	/**
	 * Main method.
	 * 
	 * @param args
	 *            command-line arguments
	 */
	public static void main(String[] args)
	{
		try
		{

			System.out.println("Preparing...");

			// Setup directories
			File baseDir = new File("src");
			File outDir = new File("out");
			outDir.mkdirs();

			// Setup input and output files
			File pdffile1 = new File(baseDir, "test/pdf1.pdf");
			File pdffile2 = new File(baseDir, "test/pdf2.pdf");
			File pdffile3 = new File(outDir, "Appended.pdf");

			System.out.println("Input PDF1: " + pdffile1);
			System.out.println("Input PDF2: " + pdffile2);
			System.out.println("Output: PDF (" + pdffile3 + ")");
			System.out.println();
			System.out.println("Appending PDFs...");

			// Setup output
			OutputStream out = new java.io.FileOutputStream(pdffile3);
			out = new java.io.BufferedOutputStream(out);

			appendPDFAttachments(pdffile1, pdffile3);

			System.out.println("Success!");

		}
		catch (Exception e)
		{
			e.printStackTrace(System.err);
			System.exit(-1);
		}
	}

	private static void appendPDFAttachments(File pdffile1, File outputFile)
			throws Exception
	{

		com.itextpdf.text.Document masterDocument = null;
		PdfWriter writer = null;

		try
		{
			// First get the current content of the shaw package object.
			PdfReader cwpDoc = new PdfReader(pdffile1.getAbsolutePath());
			cwpDoc.consolidateNamedDestinations();

			// we retrieve the total number of pages from this PDF
			int n = cwpDoc.getNumberOfPages();
			System.out.println("There are " + n + " pages in this document.");
			// use same layout as form
			masterDocument = new com.itextpdf.text.Document(cwpDoc
					.getPageSizeWithRotation(1));
			// Now write to the new PDF document

			writer = PdfWriter.getInstance(masterDocument,
					new FileOutputStream(outputFile.getAbsolutePath()));
			// writer = PdfWriter.getInstance(masterDocument, outputStream);
			// Open the new PDF document being created
			masterDocument.open();

			appendPDFDocument(cwpDoc, writer, masterDocument);

			// close PDF document.
			masterDocument.close();
			writer.flush();
			writer.close();

			System.out.println("Resulting PDF document is "
					+ writer.getPageSize() + " page(s).");

		}
		catch (IOException io)
		{
			String msg = "ERROR: Unable to get content from shaw package PDF object.";
			System.out.println(msg + io.toString());
			throw new Exception(msg, io);
		}
		catch (DocumentException de)
		{
			String msg = "ERROR: Unable to make a copy of the shaw package contents.";
			System.out.println(msg + de.toString());
			throw new Exception(msg, de);
		}
	}

	private static void appendPDFDocument(PdfReader pdfDoc, PdfWriter writer,
			Document masterDocument) throws Exception
	{

		try
		{
			// we retrieve the total number of pages from this PDF
			int n = pdfDoc.getNumberOfPages();
			System.out.println("There are " + n
					+ " pages in this project document.");

			pdfDoc.consolidateNamedDestinations();
			// Get the size of the first page in this project document.
			System.out
					.println("Get the size of this first page in the project document being appended.");
			Rectangle firstPageBox = pdfDoc.getPageSizeWithRotation(1);
			Rectangle firstNewpageBox = new Rectangle(firstPageBox.getWidth(),
					firstPageBox.getHeight());
			System.out
					.println("Set the master document's page size to the first page size.");
			// Set the page size for this first page about to be appended.
			masterDocument.setPageSize(firstNewpageBox);
			masterDocument.setMargins(0, 0, 0, 0);
			System.out
					.println("Create a new document page for the first page in the document using this new size.");
			// Create a new page.
			masterDocument.newPage();

			// Declare a page
			PdfImportedPage page = null;
			PdfContentByte cb = null;

			// Add the pages of the current project document PDF to the new PDF
			// document being constructed.
			for (int i = 0; i < n;)
			{
				++i;
				// Get a page from the PDF attachment
				System.out.println("Get page contents for page number:" + i);
				page = writer.getImportedPage(pdfDoc, i);
				// Get writer content.
				cb = writer.getDirectContent();

				int pageRotation = pdfDoc.getPageRotation(i);
				System.out.println("Page rotation is: " + pageRotation
						+ " for page number:" + i);

				// Get the size of the page.
				Rectangle pageBox = pdfDoc.getPageSizeWithRotation(i);
				System.out.println("Page width for this page is: "
						+ pageBox.getWidth());
				System.out.println("Page height for this page is: "
						+ pageBox.getHeight());
				System.out.println("Rotation for this page is: "
						+ pageBox.getRotation());
				System.out.println("Rotation for this page is: "
						+ pageBox.getRotation());

				System.out.println("Create page box for this page.");
				// Create a new page box.
				Rectangle newpageBox2 = new Rectangle(pageBox.getWidth(),
						pageBox.getHeight());
				System.out
						.println("Append this new page of the project document.");
				// append this new page to the master document.
				cb.addTemplate(page, newpageBox2.getLeft(), newpageBox2
						.getBottom());

				System.out.println("Page get left for this page is: "
						+ newpageBox2.getLeft());
				System.out.println("Page get bottom for this page is: "
						+ newpageBox2.getBottom());

				// Get the next page within this project document if there is
				// one.
				System.out.println("Check if there is a next page");
				if (i < n)
				{
					int nextPage = i + 1;
					System.out.println("Processing next page: " + nextPage);
					// Get the size of the next page in this project document if
					// there is one.
					Rectangle nextPageBox = pdfDoc
							.getPageSizeWithRotation(nextPage);
					Rectangle nextNewpageBox = new Rectangle(nextPageBox
							.getWidth(), nextPageBox.getHeight());

					if (nextPageBox.hasBorders())
					{
						System.out.println("Case page has borders.");
						// --If the original page has borders transfer them to
						// the new page...
						nextNewpageBox.setBorder(nextPageBox.getBorder());
						nextNewpageBox.setBorderWidth(nextPageBox
								.getBorderWidth());
						nextNewpageBox.setBorderWidth(nextPageBox
								.getBorderWidth());
						nextNewpageBox.setBorderWidthBottom(nextPageBox
								.getBorderWidthBottom());
						nextNewpageBox.setBorderWidthLeft(nextPageBox
								.getBorderWidthLeft());
						nextNewpageBox.setBorderWidthRight(nextPageBox
								.getBorderWidthRight());
						nextNewpageBox.setBorderWidthTop(nextPageBox
								.getBorderWidthTop());
					}
					// Set the page size for this next page within the project
					// document.
					masterDocument.setPageSize(nextNewpageBox);
					masterDocument.setMargins(0, 0, 0, 0);
					System.out
							.println("Create a new document page with the new size:"
									+ nextPageBox.getWidth()
									+ " "
									+ nextPageBox.getHeight());
					// Create a new page with the correct size now.
					masterDocument.newPage();
				}

				System.out.println("Processed page " + i);
			}
		}
		catch (Exception e)
		{
			String msg = "ERROR:  Unable to append attachment for PDF document.";
			System.out.println(msg + e.toString());
			throw new Exception(msg, e);
		}
		finally
		{
			pdfDoc.close();
		}

	}

}
